// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users(email, password)
VALUES
    ($1, $2) RETURNING id
`

type CreateUserParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// -
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO
    users_profiles(users_id, first_name, last_name)
VALUES
    ($1, $2, $3) RETURNING id, users_id, first_name, last_name, balance
`

type CreateUserProfileParams struct {
	UsersID   int32  `json:"users_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// -
func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (UsersProfile, error) {
	row := q.db.QueryRow(ctx, createUserProfile, arg.UsersID, arg.FirstName, arg.LastName)
	var i UsersProfile
	err := row.Scan(
		&i.ID,
		&i.UsersID,
		&i.FirstName,
		&i.LastName,
		&i.Balance,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM
    users
WHERE id = $1
`

// -
func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserBalance = `-- name: GetUserBalance :one
SELECT
    balance
FROM
    users_profiles
WHERE
    users_id = $1
LIMIT
    1
`

// -
func (q *Queries) GetUserBalance(ctx context.Context, usersID int32) (pgtype.Numeric, error) {
	row := q.db.QueryRow(ctx, getUserBalance, usersID)
	var balance pgtype.Numeric
	err := row.Scan(&balance)
	return balance, err
}

const getUserIDByEmail = `-- name: GetUserIDByEmail :one
SELECT
    id
FROM
    users
WHERE
    email = $1
LIMIT
    1
`

func (q *Queries) GetUserIDByEmail(ctx context.Context, email string) (int32, error) {
	row := q.db.QueryRow(ctx, getUserIDByEmail, email)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserNames = `-- name: GetUserNames :one
SELECT
    first_name,
    last_name
FROM
    users_profiles
WHERE
    users_id = $1
LIMIT
    1
`

type GetUserNamesRow struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
}

// -
func (q *Queries) GetUserNames(ctx context.Context, usersID int32) (GetUserNamesRow, error) {
	row := q.db.QueryRow(ctx, getUserNames, usersID)
	var i GetUserNamesRow
	err := row.Scan(&i.FirstName, &i.LastName)
	return i, err
}

const moneyTransactionDecreaseByUserId = `-- name: MoneyTransactionDecreaseByUserId :exec
UPDATE users_profiles SET balance = balance - $2
WHERE id = $1
`

type MoneyTransactionDecreaseByUserIdParams struct {
	ID      int32          `json:"id"`
	Balance pgtype.Numeric `json:"balance"`
}

// -
func (q *Queries) MoneyTransactionDecreaseByUserId(ctx context.Context, arg MoneyTransactionDecreaseByUserIdParams) error {
	_, err := q.db.Exec(ctx, moneyTransactionDecreaseByUserId, arg.ID, arg.Balance)
	return err
}

const moneyTransactionIncreaseByUserId = `-- name: MoneyTransactionIncreaseByUserId :exec
UPDATE users_profiles SET balance = balance + $2
WHERE id = $1
`

type MoneyTransactionIncreaseByUserIdParams struct {
	ID      int32          `json:"id"`
	Balance pgtype.Numeric `json:"balance"`
}

// -
func (q *Queries) MoneyTransactionIncreaseByUserId(ctx context.Context, arg MoneyTransactionIncreaseByUserIdParams) error {
	_, err := q.db.Exec(ctx, moneyTransactionIncreaseByUserId, arg.ID, arg.Balance)
	return err
}
